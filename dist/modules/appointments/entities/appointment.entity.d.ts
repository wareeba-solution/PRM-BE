import { AppointmentStatus } from '../enums/appointment-status.enum';
import { AppointmentType } from '../enums/appointment-type.enum';
import { AppointmentPriority } from '../enums/appointment-priority.enum';
import { User } from '../../users/entities/user.entity';
import { Department } from '../../departments/entities/department.entity';
import { Organization } from '../../organizations/entities/organization.entity';
import { Contact } from '../../contacts/entities/contact.entity';
export declare class Appointment {
    id: string;
    organizationId: string;
    doctorId: string;
    patientId: string;
    departmentId?: string;
    title: string;
    description?: string;
    startTime: Date;
    endTime: Date;
    status: AppointmentStatus;
    type: AppointmentType;
    priority: AppointmentPriority;
    location?: string;
    notes?: string;
    metadata?: {
        reason?: string;
        symptoms?: string[];
        previousAppointments?: string[];
        followUpRequired?: boolean;
        followUpNotes?: string;
        [key: string]: any;
    };
    isRecurring: boolean;
    recurrenceRule?: {
        frequency: 'daily' | 'weekly' | 'monthly' | 'yearly';
        interval: number;
        endDate?: Date;
        count?: number;
        daysOfWeek?: number[];
        daysOfMonth?: number[];
    };
    parentAppointmentId?: string;
    cancelledAt?: Date;
    cancelledById?: string;
    cancellationReason?: string;
    rescheduledAt?: Date;
    rescheduledById?: string;
    rescheduleReason?: string;
    completedAt?: Date;
    completedById?: string;
    completionNotes?: string;
    noShowAt?: Date;
    noShowById?: string;
    noShowReason?: string;
    createdById: string;
    updatedById?: string;
    confirmedAt?: Date;
    reminderSent: boolean;
    reminderSentAt?: Date;
    createdAt: Date;
    updatedAt: Date;
    deletedAt?: Date;
    organization: Promise<Organization>;
    doctor: Promise<User>;
    patient: Promise<Contact>;
    department?: Promise<Department>;
    parentAppointment?: Promise<Appointment>;
    cancelledBy?: Promise<User>;
    rescheduledBy?: Promise<User>;
    completedBy?: Promise<User>;
    noShowBy?: Promise<User>;
    creator: Promise<User>;
    updatedBy?: Promise<User>;
    childAppointments: Promise<Appointment[]>;
    get isCancelled(): boolean;
    get isRescheduled(): boolean;
    get isCompleted(): boolean;
    get isNoShow(): boolean;
    get duration(): number;
    canBeModified(): boolean;
}
